{"version":3,"file":"size.js","sourceRoot":"","sources":["../../src/helpers/size.ts"],"names":[],"mappings":";AAAA,uCAAuD;AACvD,IAAI,SAAS,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAE5C;;GAEG;AACH;IAOI;;;OAGG;IACH,cAAY,OAAe;QACvB,OAAO,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAE3B,IAAI,CAAC,MAAM,GAAG,IAAI,sBAAW,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;IAClE,CAAC;IAED;;;;OAIG;IACI,2BAAY,GAAnB;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IACL,WAAC;AAAD,CAAC,AA1BD,IA0BC;AA1BD,oBA0BC;AAAA,CAAC","sourcesContent":["import { ISizeConvert, SizeConvert } from \"./dataSize\";\nlet dataSizes = require(\"../db/sizes.json\");\n\n/**\n * Base helper class to size converters\n */\nexport abstract class Size {\n    /**\n     * Converter to simples sizes (s, m, x, xxl, ...)\n     */\n    public simple: ISizeConvert;\n    protected dataSizes: any;\n\n    /**\n     * Default constructor\n     * @param country Must be the acronym of country source (eua, brl, eur)\n     */\n    constructor(country: string) {\n        country = country.toLowerCase();\n        this.dataSizes = dataSizes;\n\n        this.simple = new SizeConvert(this.dataSizes.simple[country]);\n    }\n\n    /**\n     * Get all data sizes\n     *\n     * @returns Object with all data sizes\n     */\n    public getDataSizes(): any {\n        return this.dataSizes;\n    }\n};\n"]}
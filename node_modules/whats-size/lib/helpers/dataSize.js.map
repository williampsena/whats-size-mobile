{"version":3,"file":"dataSize.js","sourceRoot":"","sources":["../../src/helpers/dataSize.ts"],"names":[],"mappings":";AAkBA;;GAEG;AACH;IAGI;;;OAGG;IACH,qBAAY,KAAU;QAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACI,6BAAO,GAAd,UAAe,IAAY;QACvB,IAAI,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAErC,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACtC,CAAC;QAED,MAAM,CAAC,aAAa,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACI,8BAAQ,GAAf;QACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IACL,kBAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCD,kCAmCC;AAAA,CAAC","sourcesContent":["/** \n * Common interface to convert sizes\n */\nexport interface ISizeConvert {\n    /**\n     * Convert size country source to target (example: BRL to USA)\n     * @param size Size as string\n     */\n    convert(size: string): any;\n\n    /**\n     * Get all sizes by type\n     *\n     * @returns Object with all sizes by type\n     */\n    getSizes(): any;\n}\n\n/** \n * Base class to convert sizes\n */\nexport class SizeConvert implements ISizeConvert {\n    private sizes: any;\n\n    /**\n     * Default constructor\n     * @param sizes  Contains object with specific sizes of type (clothes, shoes)\n     */\n    constructor(sizes: any) {\n        this.sizes = sizes;\n    }\n\n    /**\n     * Convert size to other country sizes\n     *\n     * @param size A size to be converted\n     * @returns Object with global sizes\n     */\n    public convert(size: string): any {\n        let convertedSize = this.sizes[size];\n\n        if (!convertedSize) {\n            throw new Error(\"Size not found\");\n        }\n\n        return convertedSize;\n    }\n\n    /**\n     * Get all sizes by type\n     *\n     * @returns Object with all sizes by type\n     */\n    public getSizes(): any {\n        return this.sizes;\n    }\n};\n"]}
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
import * as import0 from '@angular/forms/src/directives/ng_model';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
export var Wrapper_NgModel = (function () {
    function Wrapper_NgModel(p0, p1, p2, p3) {
        this.changed = false;
        this.changes = {};
        this._name = import1.UNINITIALIZED;
        this._isDisabled = import1.UNINITIALIZED;
        this._model = import1.UNINITIALIZED;
        this._options = import1.UNINITIALIZED;
        this.context = new import0.NgModel(p0, p1, p2, p3);
    }
    Wrapper_NgModel.prototype.check_name = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._name, currValue))) {
            this.changed = true;
            this.context.name = currValue;
            this.changes['name'] = new import1.SimpleChange(this._name, currValue);
            this._name = currValue;
        }
    };
    Wrapper_NgModel.prototype.check_isDisabled = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._isDisabled, currValue))) {
            this.changed = true;
            this.context.isDisabled = currValue;
            this.changes['isDisabled'] = new import1.SimpleChange(this._isDisabled, currValue);
            this._isDisabled = currValue;
        }
    };
    Wrapper_NgModel.prototype.check_model = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._model, currValue))) {
            this.changed = true;
            this.context.model = currValue;
            this.changes['model'] = new import1.SimpleChange(this._model, currValue);
            this._model = currValue;
        }
    };
    Wrapper_NgModel.prototype.check_options = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._options, currValue))) {
            this.changed = true;
            this.context.options = currValue;
            this.changes['options'] = new import1.SimpleChange(this._options, currValue);
            this._options = currValue;
        }
    };
    Wrapper_NgModel.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this.changes);
                this.changes = {};
            }
        }
        return changed;
    };
    return Wrapper_NgModel;
}());
//# sourceMappingURL=ng_model.ngfactory.js.map
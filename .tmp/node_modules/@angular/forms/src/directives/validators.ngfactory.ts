/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/forms/src/directives/validators';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
export class Wrapper_RequiredValidator {
  context:import0.RequiredValidator;
  changed:boolean;
  /*private*/ _required:any;
  constructor() {
    this.changed = false;
    this._required = import1.UNINITIALIZED;
    this.context = new import0.RequiredValidator();
  }
  check_required(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._required,currValue))) {
      this.changed = true;
      this.context.required = currValue;
      this._required = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
export class Wrapper_MinLengthValidator {
  context:import0.MinLengthValidator;
  changed:boolean;
  changes:{[key: string]:any};
  /*private*/ _minlength:any;
  constructor() {
    this.changed = false;
    this.changes = {};
    this._minlength = import1.UNINITIALIZED;
    this.context = new import0.MinLengthValidator();
  }
  check_minlength(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._minlength,currValue))) {
      this.changed = true;
      this.context.minlength = currValue;
      this.changes['minlength'] = new import1.SimpleChange(this._minlength,currValue);
      this._minlength = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this.changes);
      this.changes = {};
    } }
    return changed;
  }
}
export class Wrapper_MaxLengthValidator {
  context:import0.MaxLengthValidator;
  changed:boolean;
  changes:{[key: string]:any};
  /*private*/ _maxlength:any;
  constructor() {
    this.changed = false;
    this.changes = {};
    this._maxlength = import1.UNINITIALIZED;
    this.context = new import0.MaxLengthValidator();
  }
  check_maxlength(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._maxlength,currValue))) {
      this.changed = true;
      this.context.maxlength = currValue;
      this.changes['maxlength'] = new import1.SimpleChange(this._maxlength,currValue);
      this._maxlength = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this.changes);
      this.changes = {};
    } }
    return changed;
  }
}
export class Wrapper_PatternValidator {
  context:import0.PatternValidator;
  changed:boolean;
  changes:{[key: string]:any};
  /*private*/ _pattern:any;
  constructor() {
    this.changed = false;
    this.changes = {};
    this._pattern = import1.UNINITIALIZED;
    this.context = new import0.PatternValidator();
  }
  check_pattern(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._pattern,currValue))) {
      this.changed = true;
      this.context.pattern = currValue;
      this.changes['pattern'] = new import1.SimpleChange(this._pattern,currValue);
      this._pattern = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this.changes);
      this.changes = {};
    } }
    return changed;
  }
}
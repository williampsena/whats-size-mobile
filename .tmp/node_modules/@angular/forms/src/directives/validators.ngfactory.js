/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
import * as import0 from '@angular/forms/src/directives/validators';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
export var Wrapper_RequiredValidator = (function () {
    function Wrapper_RequiredValidator() {
        this.changed = false;
        this._required = import1.UNINITIALIZED;
        this.context = new import0.RequiredValidator();
    }
    Wrapper_RequiredValidator.prototype.check_required = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._required, currValue))) {
            this.changed = true;
            this.context.required = currValue;
            this._required = currValue;
        }
    };
    Wrapper_RequiredValidator.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        return changed;
    };
    return Wrapper_RequiredValidator;
}());
export var Wrapper_MinLengthValidator = (function () {
    function Wrapper_MinLengthValidator() {
        this.changed = false;
        this.changes = {};
        this._minlength = import1.UNINITIALIZED;
        this.context = new import0.MinLengthValidator();
    }
    Wrapper_MinLengthValidator.prototype.check_minlength = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._minlength, currValue))) {
            this.changed = true;
            this.context.minlength = currValue;
            this.changes['minlength'] = new import1.SimpleChange(this._minlength, currValue);
            this._minlength = currValue;
        }
    };
    Wrapper_MinLengthValidator.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this.changes);
                this.changes = {};
            }
        }
        return changed;
    };
    return Wrapper_MinLengthValidator;
}());
export var Wrapper_MaxLengthValidator = (function () {
    function Wrapper_MaxLengthValidator() {
        this.changed = false;
        this.changes = {};
        this._maxlength = import1.UNINITIALIZED;
        this.context = new import0.MaxLengthValidator();
    }
    Wrapper_MaxLengthValidator.prototype.check_maxlength = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._maxlength, currValue))) {
            this.changed = true;
            this.context.maxlength = currValue;
            this.changes['maxlength'] = new import1.SimpleChange(this._maxlength, currValue);
            this._maxlength = currValue;
        }
    };
    Wrapper_MaxLengthValidator.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this.changes);
                this.changes = {};
            }
        }
        return changed;
    };
    return Wrapper_MaxLengthValidator;
}());
export var Wrapper_PatternValidator = (function () {
    function Wrapper_PatternValidator() {
        this.changed = false;
        this.changes = {};
        this._pattern = import1.UNINITIALIZED;
        this.context = new import0.PatternValidator();
    }
    Wrapper_PatternValidator.prototype.check_pattern = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._pattern, currValue))) {
            this.changed = true;
            this.context.pattern = currValue;
            this.changes['pattern'] = new import1.SimpleChange(this._pattern, currValue);
            this._pattern = currValue;
        }
    };
    Wrapper_PatternValidator.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this.changes);
                this.changes = {};
            }
        }
        return changed;
    };
    return Wrapper_PatternValidator;
}());
//# sourceMappingURL=validators.ngfactory.js.map
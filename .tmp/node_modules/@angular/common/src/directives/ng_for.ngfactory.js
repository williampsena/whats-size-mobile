/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
import * as import0 from '@angular/common/src/directives/ng_for';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
export var Wrapper_NgFor = (function () {
    function Wrapper_NgFor(p0, p1, p2, p3) {
        this.changed = false;
        this.changes = {};
        this._ngForOf = import1.UNINITIALIZED;
        this._ngForTrackBy = import1.UNINITIALIZED;
        this._ngForTemplate = import1.UNINITIALIZED;
        this.context = new import0.NgFor(p0, p1, p2, p3);
    }
    Wrapper_NgFor.prototype.check_ngForOf = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._ngForOf, currValue))) {
            this.changed = true;
            this.context.ngForOf = currValue;
            this.changes['ngForOf'] = new import1.SimpleChange(this._ngForOf, currValue);
            this._ngForOf = currValue;
        }
    };
    Wrapper_NgFor.prototype.check_ngForTrackBy = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._ngForTrackBy, currValue))) {
            this.changed = true;
            this.context.ngForTrackBy = currValue;
            this.changes['ngForTrackBy'] = new import1.SimpleChange(this._ngForTrackBy, currValue);
            this._ngForTrackBy = currValue;
        }
    };
    Wrapper_NgFor.prototype.check_ngForTemplate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._ngForTemplate, currValue))) {
            this.changed = true;
            this.context.ngForTemplate = currValue;
            this.changes['ngForTemplate'] = new import1.SimpleChange(this._ngForTemplate, currValue);
            this._ngForTemplate = currValue;
        }
    };
    Wrapper_NgFor.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this.changes);
                this.changes = {};
            }
            this.context.ngDoCheck();
        }
        return changed;
    };
    return Wrapper_NgFor;
}());
//# sourceMappingURL=ng_for.ngfactory.js.map
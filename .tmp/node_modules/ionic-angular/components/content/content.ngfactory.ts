/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ionic-angular/components/content/content';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ionic-angular/config/config';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from 'ionic-angular/components/app/app';
import * as import11 from 'ionic-angular/util/keyboard';
import * as import12 from '@angular/core/src/zone/ng_zone';
import * as import13 from 'ionic-angular/navigation/view-controller';
import * as import14 from 'ionic-angular/components/tabs/tabs';
import * as import15 from '@angular/core/src/metadata/view';
import * as import16 from '@angular/core/src/linker/component_factory';
export class Wrapper_Content {
  context:import0.Content;
  changed:boolean;
  /*private*/ _fullscreen:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any,p5:any,p6:any,p7:any) {
    this.changed = false;
    this._fullscreen = import1.UNINITIALIZED;
    this.context = new import0.Content(p0,p1,p2,p3,p4,p5,p6,p7);
  }
  check_fullscreen(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._fullscreen,currValue))) {
      this.changed = true;
      this.context.fullscreen = currValue;
      this._fullscreen = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
}
var renderType_Content_Host:import4.RenderComponentType = (null as any);
class _View_Content_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _Content_0_4:Wrapper_Content;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_Content_Host0,renderType_Content_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ion-content',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_Content0(this.viewUtils,this.injector(0),this._appEl_0);
    this._Content_0_4 = new Wrapper_Content(this.parentInjector.get(import8.Config),new import9.ElementRef(this._el_0),this.renderer,this.parentInjector.get(import10.App),this.parentInjector.get(import11.Keyboard),this.parentInjector.get(import12.NgZone),this.parentInjector.get(import13.ViewController,(null as any)),this.parentInjector.get(import14.Tabs,(null as any)));
    this._appEl_0.initComponent(this._Content_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._Content_0_4.context,this.projectableNodes,(null as any));
    this._expr_0 = import1.UNINITIALIZED;
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.Content) && (0 === requestNodeIndex))) { return this._Content_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._Content_0_4.detectChangesInternal(this,this._el_0,throwOnChange)) { this._appEl_0.componentView.markAsCheckOnce(); }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this._Content_0_4.context._sbPadding;
    if (import2.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'statusbar-padding',currVal_0);
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._Content_0_4.context.ngOnDestroy();
  }
}
function viewFactory_Content_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_Content_Host === (null as any))) { (renderType_Content_Host = viewUtils.createRenderComponentType('',0,import15.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_Content_Host0(viewUtils,parentInjector,declarationEl);
}
export const ContentNgFactory:import16.ComponentFactory<import0.Content> = new import16.ComponentFactory<import0.Content>('ion-content',viewFactory_Content_Host0,import0.Content);
const styles_Content:any[] = ([] as any[]);
var renderType_Content:import4.RenderComponentType = (null as any);
class _View_Content0 extends import3.AppView<import0.Content> {
  _el_0:any;
  _el_1:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_Content0,renderType_Content,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','fixed-content');
    this.renderer.projectNodes(this._el_0,import2.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._el_1 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_1,'class','scroll-content');
    this.renderer.projectNodes(this._el_1,import2.flattenNestedViewRenderNodes(this.projectableNodes[1]));
    this.renderer.projectNodes(parentRenderNode,import2.flattenNestedViewRenderNodes(this.projectableNodes[2]));
    this.init(([] as any[]),[
      this._el_0,
      this._el_1
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
}
export function viewFactory_Content0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.Content> {
  if ((renderType_Content === (null as any))) { (renderType_Content = viewUtils.createRenderComponentType('',3,import15.ViewEncapsulation.None,styles_Content,{})); }
  return new _View_Content0(viewUtils,parentInjector,declarationEl);
}
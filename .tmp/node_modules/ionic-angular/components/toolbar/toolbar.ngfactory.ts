/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ionic-angular/components/toolbar/toolbar';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/change_detection/change_detection';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ionic-angular/navigation/view-controller';
import * as import9 from 'ionic-angular/config/config';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from '@angular/core/src/metadata/view';
import * as import12 from '@angular/core/src/linker/component_factory';
import * as import13 from '../../../@angular/common/src/directives/ng_class.ngfactory';
import * as import14 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import15 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import16 from '@angular/common/src/directives/ng_class';
export class Wrapper_Header {
  context:import0.Header;
  changed:boolean;
  constructor(p0:any,p1:any,p2:any,p3:any) {
    this.changed = false;
    this.context = new import0.Header(p0,p1,p2,p3);
  }
  detectChangesInternal(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
export class Wrapper_Footer {
  context:import0.Footer;
  changed:boolean;
  constructor(p0:any,p1:any,p2:any,p3:any) {
    this.changed = false;
    this.context = new import0.Footer(p0,p1,p2,p3);
  }
  detectChangesInternal(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
export class Wrapper_Toolbar {
  context:import0.Toolbar;
  changed:boolean;
  /*private*/ _color:any;
  /*private*/ _mode:any;
  constructor(p0:any,p1:any,p2:any,p3:any) {
    this.changed = false;
    this._color = import2.UNINITIALIZED;
    this._mode = import2.UNINITIALIZED;
    this.context = new import0.Toolbar(p0,p1,p2,p3);
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._color,currValue))) {
      this.changed = true;
      this.context.color = currValue;
      this._color = currValue;
    }
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._mode,currValue))) {
      this.changed = true;
      this.context.mode = currValue;
      this._mode = currValue;
    }
  }
  detectChangesInternal(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
var renderType_Toolbar_Host:import4.RenderComponentType = (null as any);
class _View_Toolbar_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _Toolbar_0_4:Wrapper_Toolbar;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import3.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_Toolbar_Host0,renderType_Toolbar_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import2.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ion-toolbar',rootSelector,(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','toolbar');
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_Toolbar0(this.viewUtils,this.injector(0),this._appEl_0);
    this._Toolbar_0_4 = new Wrapper_Toolbar(this.parentInjector.get(import8.ViewController,(null as any)),this.parentInjector.get(import9.Config),new import10.ElementRef(this._el_0),this.renderer);
    this._appEl_0.initComponent(this._Toolbar_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._Toolbar_0_4.context,this.projectableNodes,(null as any));
    this._expr_0 = import2.UNINITIALIZED;
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.Toolbar) && (0 === requestNodeIndex))) { return this._Toolbar_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._Toolbar_0_4.detectChangesInternal(this,this._el_0,throwOnChange)) { this._appEl_0.componentView.markAsCheckOnce(); }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this._Toolbar_0_4.context._sbPadding;
    if (import3.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'statusbar-padding',currVal_0);
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_Toolbar_Host0(viewUtils:import3.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import1.AppView<any> {
  if ((renderType_Toolbar_Host === (null as any))) { (renderType_Toolbar_Host = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_Toolbar_Host0(viewUtils,parentInjector,declarationEl);
}
export const ToolbarNgFactory:import12.ComponentFactory<import0.Toolbar> = new import12.ComponentFactory<import0.Toolbar>('ion-toolbar',viewFactory_Toolbar_Host0,import0.Toolbar);
const styles_Toolbar:any[] = ([] as any[]);
var renderType_Toolbar:import4.RenderComponentType = (null as any);
class _View_Toolbar0 extends import1.AppView<import0.Toolbar> {
  _el_0:any;
  _NgClass_0_3:import13.Wrapper_NgClass;
  _el_1:any;
  _NgClass_1_3:import13.Wrapper_NgClass;
  constructor(viewUtils:import3.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_Toolbar0,renderType_Toolbar,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import2.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','toolbar-background');
    this._NgClass_0_3 = new import13.Wrapper_NgClass(this.parentInjector.get(import14.IterableDiffers),this.parentInjector.get(import15.KeyValueDiffers),new import10.ElementRef(this._el_0),this.renderer);
    this.renderer.projectNodes(parentRenderNode,import3.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this.renderer.projectNodes(parentRenderNode,import3.flattenNestedViewRenderNodes(this.projectableNodes[1]));
    this.renderer.projectNodes(parentRenderNode,import3.flattenNestedViewRenderNodes(this.projectableNodes[2]));
    this._el_1 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_1,'class','toolbar-content');
    this._NgClass_1_3 = new import13.Wrapper_NgClass(this.parentInjector.get(import14.IterableDiffers),this.parentInjector.get(import15.KeyValueDiffers),new import10.ElementRef(this._el_1),this.renderer);
    this.renderer.projectNodes(this._el_1,import3.flattenNestedViewRenderNodes(this.projectableNodes[3]));
    this.init(([] as any[]),[
      this._el_0,
      this._el_1
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import16.NgClass) && (0 === requestNodeIndex))) { return this._NgClass_0_3.context; }
    if (((token === import16.NgClass) && (1 === requestNodeIndex))) { return this._NgClass_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = 'toolbar-background';
    this._NgClass_0_3.check_klass(currVal_0,throwOnChange,false);
    const currVal_1:any = ('toolbar-background-' + this.context._mode);
    this._NgClass_0_3.check_ngClass(currVal_1,throwOnChange,false);
    this._NgClass_0_3.detectChangesInternal(this,this._el_0,throwOnChange);
    const currVal_2:any = 'toolbar-content';
    this._NgClass_1_3.check_klass(currVal_2,throwOnChange,false);
    const currVal_3:any = ('toolbar-content-' + this.context._mode);
    this._NgClass_1_3.check_ngClass(currVal_3,throwOnChange,false);
    this._NgClass_1_3.detectChangesInternal(this,this._el_1,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_Toolbar0(viewUtils:import3.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import1.AppView<import0.Toolbar> {
  if ((renderType_Toolbar === (null as any))) { (renderType_Toolbar = viewUtils.createRenderComponentType('',4,import11.ViewEncapsulation.None,styles_Toolbar,{})); }
  return new _View_Toolbar0(viewUtils,parentInjector,declarationEl);
}
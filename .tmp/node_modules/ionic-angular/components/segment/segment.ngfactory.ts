/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ionic-angular/components/segment/segment';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/linker/element_ref';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
export class Wrapper_SegmentButton {
  context:import0.SegmentButton;
  changed:boolean;
  /*private*/ _value:any;
  /*private*/ _disabled:any;
  constructor(p0:any,p1:any) {
    this.changed = false;
    this._value = import1.UNINITIALIZED;
    this._disabled = import1.UNINITIALIZED;
    this.context = new import0.SegmentButton(p0,p1);
  }
  check_value(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._value,currValue))) {
      this.changed = true;
      this.context.value = currValue;
      this._value = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._disabled,currValue))) {
      this.changed = true;
      this.context.disabled = currValue;
      this._disabled = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
}
export class Wrapper_Segment {
  context:import0.Segment;
  changed:boolean;
  /*private*/ _color:any;
  /*private*/ _mode:any;
  /*private*/ _disabled:any;
  constructor(p0:any,p1:any,p2:any,p3:any) {
    this.changed = false;
    this._color = import1.UNINITIALIZED;
    this._mode = import1.UNINITIALIZED;
    this._disabled = import1.UNINITIALIZED;
    this.context = new import0.Segment(p0,p1,p2,p3);
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._color,currValue))) {
      this.changed = true;
      this.context.color = currValue;
      this._color = currValue;
    }
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._mode,currValue))) {
      this.changed = true;
      this.context.mode = currValue;
      this._mode = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._disabled,currValue))) {
      this.changed = true;
      this.context.disabled = currValue;
      this._disabled = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
var renderType_SegmentButton_Host:import4.RenderComponentType = (null as any);
class _View_SegmentButton_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _SegmentButton_0_4:Wrapper_SegmentButton;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_SegmentButton_Host0,renderType_SegmentButton_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ion-segment-button',rootSelector,(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','segment-button');
    this.renderer.setElementAttribute(this._el_0,'role','button');
    this.renderer.setElementAttribute(this._el_0,'tappable','');
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_SegmentButton0(this.viewUtils,this.injector(0),this._appEl_0);
    this._SegmentButton_0_4 = new Wrapper_SegmentButton(this.renderer,new import8.ElementRef(this._el_0));
    this._appEl_0.initComponent(this._SegmentButton_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._SegmentButton_0_4.context,this.projectableNodes,(null as any));
    var disposable_0:Function = this.renderer.listen(this._el_0,'click',this.eventHandler(this._handle_click_0_0.bind(this)));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],[disposable_0],([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.SegmentButton) && (0 === requestNodeIndex))) { return this._SegmentButton_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._SegmentButton_0_4.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_click_0_0($event:any):boolean {
    this._appEl_0.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._SegmentButton_0_4.context.onClick()) !== false);
    return (true && pd_0);
  }
}
function viewFactory_SegmentButton_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_SegmentButton_Host === (null as any))) { (renderType_SegmentButton_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_SegmentButton_Host0(viewUtils,parentInjector,declarationEl);
}
export const SegmentButtonNgFactory:import10.ComponentFactory<import0.SegmentButton> = new import10.ComponentFactory<import0.SegmentButton>('ion-segment-button',viewFactory_SegmentButton_Host0,import0.SegmentButton);
const styles_SegmentButton:any[] = ([] as any[]);
var renderType_SegmentButton:import4.RenderComponentType = (null as any);
class _View_SegmentButton0 extends import3.AppView<import0.SegmentButton> {
  _el_0:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_SegmentButton0,renderType_SegmentButton,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this.renderer.projectNodes(parentRenderNode,import2.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','button-effect');
    this.init(([] as any[]),[this._el_0],([] as any[]),([] as any[]));
    return (null as any);
  }
}
export function viewFactory_SegmentButton0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.SegmentButton> {
  if ((renderType_SegmentButton === (null as any))) { (renderType_SegmentButton = viewUtils.createRenderComponentType('',1,import9.ViewEncapsulation.None,styles_SegmentButton,{})); }
  return new _View_SegmentButton0(viewUtils,parentInjector,declarationEl);
}
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ionic-angular/components/infinite-scroll/infinite-scroll-content';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ionic-angular/components/infinite-scroll/infinite-scroll';
import * as import9 from 'ionic-angular/config/config';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/component_factory';
import * as import12 from '../../../@angular/common/src/directives/ng_if.ngfactory';
import * as import13 from '@angular/core/src/linker/template_ref';
import * as import14 from '@angular/common/src/directives/ng_if';
import * as import15 from '../spinner/spinner.ngfactory';
import * as import16 from '@angular/core/src/linker/element_ref';
import * as import17 from 'ionic-angular/components/spinner/spinner';
import * as import18 from '@angular/core/src/security';
export class Wrapper_InfiniteScrollContent {
  context:import0.InfiniteScrollContent;
  changed:boolean;
  /*private*/ _loadingSpinner:any;
  /*private*/ _loadingText:any;
  constructor(p0:any,p1:any) {
    this.changed = false;
    this._loadingSpinner = import1.UNINITIALIZED;
    this._loadingText = import1.UNINITIALIZED;
    this.context = new import0.InfiniteScrollContent(p0,p1);
  }
  check_loadingSpinner(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._loadingSpinner,currValue))) {
      this.changed = true;
      this.context.loadingSpinner = currValue;
      this._loadingSpinner = currValue;
    }
  }
  check_loadingText(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._loadingText,currValue))) {
      this.changed = true;
      this.context.loadingText = currValue;
      this._loadingText = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
}
var renderType_InfiniteScrollContent_Host:import4.RenderComponentType = (null as any);
class _View_InfiniteScrollContent_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _InfiniteScrollContent_0_4:Wrapper_InfiniteScrollContent;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_InfiniteScrollContent_Host0,renderType_InfiniteScrollContent_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ion-infinite-scroll-content',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_InfiniteScrollContent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._InfiniteScrollContent_0_4 = new Wrapper_InfiniteScrollContent(this.parentInjector.get(import8.InfiniteScroll),this.parentInjector.get(import9.Config));
    this._appEl_0.initComponent(this._InfiniteScrollContent_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._InfiniteScrollContent_0_4.context,this.projectableNodes,(null as any));
    this._expr_0 = import1.UNINITIALIZED;
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.InfiniteScrollContent) && (0 === requestNodeIndex))) { return this._InfiniteScrollContent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._InfiniteScrollContent_0_4.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this._InfiniteScrollContent_0_4.context.inf.state;
    if (import2.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementAttribute(this._el_0,'state',((currVal_0 == (null as any))? (null as any): currVal_0.toString()));
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_InfiniteScrollContent_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_InfiniteScrollContent_Host === (null as any))) { (renderType_InfiniteScrollContent_Host = viewUtils.createRenderComponentType('',0,import10.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_InfiniteScrollContent_Host0(viewUtils,parentInjector,declarationEl);
}
export const InfiniteScrollContentNgFactory:import11.ComponentFactory<import0.InfiniteScrollContent> = new import11.ComponentFactory<import0.InfiniteScrollContent>('ion-infinite-scroll-content',viewFactory_InfiniteScrollContent_Host0,import0.InfiniteScrollContent);
const styles_InfiniteScrollContent:any[] = ([] as any[]);
var renderType_InfiniteScrollContent:import4.RenderComponentType = (null as any);
class _View_InfiniteScrollContent0 extends import3.AppView<import0.InfiniteScrollContent> {
  _el_0:any;
  _anchor_1:any;
  /*private*/ _appEl_1:import5.AppElement;
  _TemplateRef_1_5:any;
  _NgIf_1_6:import12.Wrapper_NgIf;
  _anchor_2:any;
  /*private*/ _appEl_2:import5.AppElement;
  _TemplateRef_2_5:any;
  _NgIf_2_6:import12.Wrapper_NgIf;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_InfiniteScrollContent0,renderType_InfiniteScrollContent,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','infinite-loading');
    this._anchor_1 = this.renderer.createTemplateAnchor(this._el_0,(null as any));
    this._appEl_1 = new import5.AppElement(1,0,this,this._anchor_1);
    this._TemplateRef_1_5 = new import13.TemplateRef_(this._appEl_1,viewFactory_InfiniteScrollContent1);
    this._NgIf_1_6 = new import12.Wrapper_NgIf(this._appEl_1.vcRef,this._TemplateRef_1_5);
    this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0,(null as any));
    this._appEl_2 = new import5.AppElement(2,0,this,this._anchor_2);
    this._TemplateRef_2_5 = new import13.TemplateRef_(this._appEl_2,viewFactory_InfiniteScrollContent2);
    this._NgIf_2_6 = new import12.Wrapper_NgIf(this._appEl_2.vcRef,this._TemplateRef_2_5);
    this.init(([] as any[]),[
      this._el_0,
      this._anchor_1,
      this._anchor_2
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import13.TemplateRef) && (1 === requestNodeIndex))) { return this._TemplateRef_1_5; }
    if (((token === import14.NgIf) && (1 === requestNodeIndex))) { return this._NgIf_1_6.context; }
    if (((token === import13.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import14.NgIf) && (2 === requestNodeIndex))) { return this._NgIf_2_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = this.context.loadingSpinner;
    this._NgIf_1_6.check_ngIf(currVal_0,throwOnChange,false);
    this._NgIf_1_6.detectChangesInternal(this,this._anchor_1,throwOnChange);
    const currVal_1:any = this.context.loadingText;
    this._NgIf_2_6.check_ngIf(currVal_1,throwOnChange,false);
    this._NgIf_2_6.detectChangesInternal(this,this._anchor_2,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_InfiniteScrollContent0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.InfiniteScrollContent> {
  if ((renderType_InfiniteScrollContent === (null as any))) { (renderType_InfiniteScrollContent = viewUtils.createRenderComponentType('',0,import10.ViewEncapsulation.None,styles_InfiniteScrollContent,{})); }
  return new _View_InfiniteScrollContent0(viewUtils,parentInjector,declarationEl);
}
class _View_InfiniteScrollContent1 extends import3.AppView<any> {
  _el_0:any;
  _el_1:any;
  /*private*/ _appEl_1:import5.AppElement;
  _Spinner_1_4:import15.Wrapper_Spinner;
  /*private*/ _expr_1:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_InfiniteScrollContent1,renderType_InfiniteScrollContent,import7.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','infinite-loading-spinner');
    this._el_1 = this.renderer.createElement(this._el_0,'ion-spinner',(null as any));
    this._appEl_1 = new import5.AppElement(1,0,this,this._el_1);
    var compView_1:any = import15.viewFactory_Spinner0(this.viewUtils,this.injector(1),this._appEl_1);
    this._Spinner_1_4 = new import15.Wrapper_Spinner(this.parent.parentInjector.get(import9.Config),new import16.ElementRef(this._el_1),this.renderer);
    this._appEl_1.initComponent(this._Spinner_1_4.context,([] as any[]),compView_1);
    compView_1.create(this._Spinner_1_4.context,([] as any[]),(null as any));
    this._expr_1 = import1.UNINITIALIZED;
    this.init(([] as any[]).concat([this._el_0]),[
      this._el_0,
      this._el_1
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import17.Spinner) && (1 === requestNodeIndex))) { return this._Spinner_1_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = this.parent.context.loadingSpinner;
    this._Spinner_1_4.check_name(currVal_0,throwOnChange,false);
    if (this._Spinner_1_4.detectChangesInternal(this,this._el_1,throwOnChange)) { this._appEl_1.componentView.markAsCheckOnce(); }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_1:any = this._Spinner_1_4.context.paused;
    if (import2.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementClass(this._el_1,'spinner-paused',currVal_1);
      this._expr_1 = currVal_1;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_InfiniteScrollContent1(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  return new _View_InfiniteScrollContent1(viewUtils,parentInjector,declarationEl);
}
class _View_InfiniteScrollContent2 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_InfiniteScrollContent2,renderType_InfiniteScrollContent,import7.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','infinite-loading-text');
    this._expr_0 = import1.UNINITIALIZED;
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this.parent.context.loadingText;
    if (import2.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementProperty(this._el_0,'innerHTML',this.viewUtils.sanitizer.sanitize(import18.SecurityContext.HTML,currVal_0));
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_InfiniteScrollContent2(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  return new _View_InfiniteScrollContent2(viewUtils,parentInjector,declarationEl);
}
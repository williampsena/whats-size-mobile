/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ionic-angular/components/scroll/scroll';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/linker/element_ref';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
export class Wrapper_Scroll {
  context:import0.Scroll;
  changed:boolean;
  /*private*/ _scrollX:any;
  /*private*/ _scrollY:any;
  /*private*/ _zoom:any;
  /*private*/ _maxZoom:any;
  constructor(p0:any) {
    this.changed = false;
    this._scrollX = import1.UNINITIALIZED;
    this._scrollY = import1.UNINITIALIZED;
    this._zoom = import1.UNINITIALIZED;
    this._maxZoom = import1.UNINITIALIZED;
    this.context = new import0.Scroll(p0);
  }
  check_scrollX(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._scrollX,currValue))) {
      this.changed = true;
      this.context.scrollX = currValue;
      this._scrollX = currValue;
    }
  }
  check_scrollY(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._scrollY,currValue))) {
      this.changed = true;
      this.context.scrollY = currValue;
      this._scrollY = currValue;
    }
  }
  check_zoom(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._zoom,currValue))) {
      this.changed = true;
      this.context.zoom = currValue;
      this._zoom = currValue;
    }
  }
  check_maxZoom(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._maxZoom,currValue))) {
      this.changed = true;
      this.context.maxZoom = currValue;
      this._maxZoom = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
}
var renderType_Scroll_Host:import4.RenderComponentType = (null as any);
class _View_Scroll_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _Scroll_0_4:Wrapper_Scroll;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_Scroll_Host0,renderType_Scroll_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ion-scroll',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_Scroll0(this.viewUtils,this.injector(0),this._appEl_0);
    this._Scroll_0_4 = new Wrapper_Scroll(new import8.ElementRef(this._el_0));
    this._appEl_0.initComponent(this._Scroll_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._Scroll_0_4.context,this.projectableNodes,(null as any));
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.Scroll) && (0 === requestNodeIndex))) { return this._Scroll_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._Scroll_0_4.detectChangesInternal(this,this._el_0,throwOnChange)) { this._appEl_0.componentView.markAsCheckOnce(); }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this._Scroll_0_4.context.scrollX;
    if (import2.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'scroll-x',currVal_0);
      this._expr_0 = currVal_0;
    }
    const currVal_1:any = this._Scroll_0_4.context.scrollY;
    if (import2.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementClass(this._el_0,'scroll-y',currVal_1);
      this._expr_1 = currVal_1;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_Scroll_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_Scroll_Host === (null as any))) { (renderType_Scroll_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_Scroll_Host0(viewUtils,parentInjector,declarationEl);
}
export const ScrollNgFactory:import10.ComponentFactory<import0.Scroll> = new import10.ComponentFactory<import0.Scroll>('ion-scroll',viewFactory_Scroll_Host0,import0.Scroll);
const styles_Scroll:any[] = ([] as any[]);
var renderType_Scroll:import4.RenderComponentType = (null as any);
class _View_Scroll0 extends import3.AppView<import0.Scroll> {
  _el_0:any;
  _el_1:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_Scroll0,renderType_Scroll,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','scroll-content');
    this._el_1 = this.renderer.createElement(this._el_0,'div',(null as any));
    this.renderer.setElementAttribute(this._el_1,'class','scroll-zoom-wrapper');
    this.renderer.projectNodes(this._el_1,import2.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this.init(([] as any[]),[
      this._el_0,
      this._el_1
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
}
export function viewFactory_Scroll0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.Scroll> {
  if ((renderType_Scroll === (null as any))) { (renderType_Scroll = viewUtils.createRenderComponentType('',1,import9.ViewEncapsulation.None,styles_Scroll,{})); }
  return new _View_Scroll0(viewUtils,parentInjector,declarationEl);
}
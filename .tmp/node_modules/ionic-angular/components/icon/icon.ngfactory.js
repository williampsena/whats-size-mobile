/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
import * as import0 from 'ionic-angular/components/icon/icon';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
export var Wrapper_Icon = (function () {
    function Wrapper_Icon(p0, p1, p2) {
        this.changed = false;
        this._color = import1.UNINITIALIZED;
        this._mode = import1.UNINITIALIZED;
        this._name = import1.UNINITIALIZED;
        this._ios = import1.UNINITIALIZED;
        this._md = import1.UNINITIALIZED;
        this._isActive = import1.UNINITIALIZED;
        this.context = new import0.Icon(p0, p1, p2);
    }
    Wrapper_Icon.prototype.check_color = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._color, currValue))) {
            this.changed = true;
            this.context.color = currValue;
            this._color = currValue;
        }
    };
    Wrapper_Icon.prototype.check_mode = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._mode, currValue))) {
            this.changed = true;
            this.context.mode = currValue;
            this._mode = currValue;
        }
    };
    Wrapper_Icon.prototype.check_name = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._name, currValue))) {
            this.changed = true;
            this.context.name = currValue;
            this._name = currValue;
        }
    };
    Wrapper_Icon.prototype.check_ios = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._ios, currValue))) {
            this.changed = true;
            this.context.ios = currValue;
            this._ios = currValue;
        }
    };
    Wrapper_Icon.prototype.check_md = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._md, currValue))) {
            this.changed = true;
            this.context.md = currValue;
            this._md = currValue;
        }
    };
    Wrapper_Icon.prototype.check_isActive = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._isActive, currValue))) {
            this.changed = true;
            this.context.isActive = currValue;
            this._isActive = currValue;
        }
    };
    Wrapper_Icon.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        return changed;
    };
    return Wrapper_Icon;
}());
//# sourceMappingURL=icon.ngfactory.js.map
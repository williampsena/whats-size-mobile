/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from 'ionic-angular/components/radio/radio-button';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/element';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ionic-angular/util/form';
import * as import9 from 'ionic-angular/config/config';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from 'ionic-angular/components/item/item';
import * as import12 from 'ionic-angular/components/radio/radio-group';
import * as import13 from '@angular/core/src/metadata/view';
import * as import14 from '@angular/core/src/linker/component_factory';
import * as import15 from '../button/button.ngfactory';
import * as import16 from 'ionic-angular/components/button/button';
export var Wrapper_RadioButton = (function () {
    function Wrapper_RadioButton(p0, p1, p2, p3, p4, p5) {
        this.changed = false;
        this._color = import1.UNINITIALIZED;
        this._mode = import1.UNINITIALIZED;
        this._value = import1.UNINITIALIZED;
        this._checked = import1.UNINITIALIZED;
        this._disabled = import1.UNINITIALIZED;
        this.context = new import0.RadioButton(p0, p1, p2, p3, p4, p5);
    }
    Wrapper_RadioButton.prototype.check_color = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._color, currValue))) {
            this.changed = true;
            this.context.color = currValue;
            this._color = currValue;
        }
    };
    Wrapper_RadioButton.prototype.check_mode = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._mode, currValue))) {
            this.changed = true;
            this.context.mode = currValue;
            this._mode = currValue;
        }
    };
    Wrapper_RadioButton.prototype.check_value = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._value, currValue))) {
            this.changed = true;
            this.context.value = currValue;
            this._value = currValue;
        }
    };
    Wrapper_RadioButton.prototype.check_checked = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._checked, currValue))) {
            this.changed = true;
            this.context.checked = currValue;
            this._checked = currValue;
        }
    };
    Wrapper_RadioButton.prototype.check_disabled = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._disabled, currValue))) {
            this.changed = true;
            this.context.disabled = currValue;
            this._disabled = currValue;
        }
    };
    Wrapper_RadioButton.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    return Wrapper_RadioButton;
}());
var renderType_RadioButton_Host = null;
var _View_RadioButton_Host0 = (function (_super) {
    __extends(_View_RadioButton_Host0, _super);
    function _View_RadioButton_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_RadioButton_Host0, renderType_RadioButton_Host, import7.ViewType.HOST, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_RadioButton_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('ion-radio', rootSelector, null);
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_RadioButton0(this.viewUtils, this.injector(0), this._appEl_0);
        this._RadioButton_0_4 = new Wrapper_RadioButton(this.parentInjector.get(import8.Form), this.parentInjector.get(import9.Config), new import10.ElementRef(this._el_0), this.renderer, this.parentInjector.get(import11.Item, null), this.parentInjector.get(import12.RadioGroup, null));
        this._appEl_0.initComponent(this._RadioButton_0_4.context, [], compView_0);
        compView_0.create(this._RadioButton_0_4.context, this.projectableNodes, null);
        var disposable_0 = this.renderer.listen(this._el_0, 'click', this.eventHandler(this._handle_click_0_0.bind(this)));
        this._expr_1 = import1.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [disposable_0], []);
        return this._appEl_0;
    };
    _View_RadioButton_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.RadioButton) && (0 === requestNodeIndex))) {
            return this._RadioButton_0_4.context;
        }
        return notFoundResult;
    };
    _View_RadioButton_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._RadioButton_0_4.detectChangesInternal(this, this._el_0, throwOnChange);
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_1 = this._RadioButton_0_4.context._disabled;
        if (import2.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementClass(this._el_0, 'radio-disabled', currVal_1);
            this._expr_1 = currVal_1;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_RadioButton_Host0.prototype.destroyInternal = function () {
        this._RadioButton_0_4.context.ngOnDestroy();
    };
    _View_RadioButton_Host0.prototype._handle_click_0_0 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._RadioButton_0_4.context._click($event) !== false);
        return (true && pd_0);
    };
    return _View_RadioButton_Host0;
}(import3.AppView));
function viewFactory_RadioButton_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_RadioButton_Host === null)) {
        (renderType_RadioButton_Host = viewUtils.createRenderComponentType('', 0, import13.ViewEncapsulation.None, [], {}));
    }
    return new _View_RadioButton_Host0(viewUtils, parentInjector, declarationEl);
}
export var RadioButtonNgFactory = new import14.ComponentFactory('ion-radio', viewFactory_RadioButton_Host0, import0.RadioButton);
var styles_RadioButton = [];
var renderType_RadioButton = null;
var _View_RadioButton0 = (function (_super) {
    __extends(_View_RadioButton0, _super);
    function _View_RadioButton0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_RadioButton0, renderType_RadioButton, import7.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_RadioButton0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'radio-icon');
        this._text_1 = this.renderer.createText(this._el_0, ' ', null);
        this._el_2 = this.renderer.createElement(this._el_0, 'div', null);
        this.renderer.setElementAttribute(this._el_2, 'class', 'radio-inner');
        this._text_3 = this.renderer.createText(this._el_0, ' ', null);
        this._text_4 = this.renderer.createText(parentRenderNode, ' ', null);
        this._el_5 = this.renderer.createElement(parentRenderNode, 'button', null);
        this.renderer.setElementAttribute(this._el_5, 'class', 'item-cover');
        this.renderer.setElementAttribute(this._el_5, 'ion-button', 'item-cover');
        this.renderer.setElementAttribute(this._el_5, 'role', 'radio');
        this.renderer.setElementAttribute(this._el_5, 'type', 'button');
        this._appEl_5 = new import5.AppElement(5, null, this, this._el_5);
        var compView_5 = import15.viewFactory_Button0(this.viewUtils, this.injector(5), this._appEl_5);
        this._Button_5_4 = new import15.Wrapper_Button(null, 'item-cover', this.parentInjector.get(import9.Config), new import10.ElementRef(this._el_5), this.renderer);
        this._appEl_5.initComponent(this._Button_5_4.context, [], compView_5);
        this._text_6 = this.renderer.createText(null, ' ', null);
        compView_5.create(this._Button_5_4.context, [[].concat([this._text_6])], null);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
        this.init([], [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4,
            this._el_5,
            this._text_6
        ], [], []);
        return null;
    };
    _View_RadioButton0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import16.Button) && ((5 <= requestNodeIndex) && (requestNodeIndex <= 6)))) {
            return this._Button_5_4.context;
        }
        return notFoundResult;
    };
    _View_RadioButton0.prototype.detectChangesInternal = function (throwOnChange) {
        if (this._Button_5_4.detectChangesInternal(this, this._el_5, throwOnChange)) {
            this._appEl_5.componentView.markAsCheckOnce();
        }
        this.detectContentChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._Button_5_4.context.ngAfterContentInit();
            }
        }
        var currVal_0 = this.context._checked;
        if (import2.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementClass(this._el_0, 'radio-checked', currVal_0);
            this._expr_0 = currVal_0;
        }
        var currVal_1 = this.context.id;
        if (import2.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementProperty(this._el_5, 'id', currVal_1);
            this._expr_1 = currVal_1;
        }
        var currVal_2 = this.context._checked;
        if (import2.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setElementAttribute(this._el_5, 'aria-checked', ((currVal_2 == null) ? null : currVal_2.toString()));
            this._expr_2 = currVal_2;
        }
        var currVal_3 = this.context._labelId;
        if (import2.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this.renderer.setElementAttribute(this._el_5, 'aria-labelledby', ((currVal_3 == null) ? null : currVal_3.toString()));
            this._expr_3 = currVal_3;
        }
        var currVal_4 = this.context._disabled;
        if (import2.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            this.renderer.setElementAttribute(this._el_5, 'aria-disabled', ((currVal_4 == null) ? null : currVal_4.toString()));
            this._expr_4 = currVal_4;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_RadioButton0;
}(import3.AppView));
export function viewFactory_RadioButton0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_RadioButton === null)) {
        (renderType_RadioButton = viewUtils.createRenderComponentType('', 0, import13.ViewEncapsulation.None, styles_RadioButton, {}));
    }
    return new _View_RadioButton0(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=radio-button.ngfactory.js.map
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ionic-angular/components/fab/fab';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ionic-angular/config/config';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/component_factory';
import * as import12 from '../icon/icon.ngfactory';
import * as import13 from 'ionic-angular/components/icon/icon';
import * as import14 from '@angular/core/src/linker/query_list';
export class Wrapper_FabButton {
  context:import0.FabButton;
  changed:boolean;
  /*private*/ _color:any;
  /*private*/ _mode:any;
  constructor(p0:any,p1:any,p2:any) {
    this.changed = false;
    this._color = import1.UNINITIALIZED;
    this._mode = import1.UNINITIALIZED;
    this.context = new import0.FabButton(p0,p1,p2);
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._color,currValue))) {
      this.changed = true;
      this.context.color = currValue;
      this._color = currValue;
    }
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._mode,currValue))) {
      this.changed = true;
      this.context.mode = currValue;
      this._mode = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
export class Wrapper_FabList {
  context:import0.FabList;
  changed:boolean;
  constructor(p0:any,p1:any) {
    this.changed = false;
    this.context = new import0.FabList(p0,p1);
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
export class Wrapper_FabContainer {
  context:import0.FabContainer;
  changed:boolean;
  constructor(p0:any) {
    this.changed = false;
    this.context = new import0.FabContainer(p0);
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
var renderType_FabButton_Host:import4.RenderComponentType = (null as any);
class _View_FabButton_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _FabButton_0_4:Wrapper_FabButton;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_FabButton_Host0,renderType_FabButton_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('div',rootSelector,(null as any));
    this.renderer.setElementAttribute(this._el_0,'ion-fab','');
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_FabButton0(this.viewUtils,this.injector(0),this._appEl_0);
    this._FabButton_0_4 = new Wrapper_FabButton(this.parentInjector.get(import8.Config),new import9.ElementRef(this._el_0),this.renderer);
    this._appEl_0.initComponent(this._FabButton_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._FabButton_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.FabButton) && (0 === requestNodeIndex))) { return this._FabButton_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._FabButton_0_4.detectChangesInternal(this,this._el_0,throwOnChange)) { this._appEl_0.componentView.markAsCheckOnce(); }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_FabButton_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_FabButton_Host === (null as any))) { (renderType_FabButton_Host = viewUtils.createRenderComponentType('',0,import10.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_FabButton_Host0(viewUtils,parentInjector,declarationEl);
}
export const FabButtonNgFactory:import11.ComponentFactory<import0.FabButton> = new import11.ComponentFactory<import0.FabButton>('[ion-fab]',viewFactory_FabButton_Host0,import0.FabButton);
const styles_FabButton:any[] = ([] as any[]);
var renderType_FabButton:import4.RenderComponentType = (null as any);
class _View_FabButton0 extends import3.AppView<import0.FabButton> {
  _el_0:any;
  _Icon_0_3:import12.Wrapper_Icon;
  _el_1:any;
  _el_2:any;
  /*private*/ _expr_1:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_FabButton0,renderType_FabButton,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'ion-icon',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','fab-close-icon');
    this.renderer.setElementAttribute(this._el_0,'name','close');
    this.renderer.setElementAttribute(this._el_0,'role','img');
    this._Icon_0_3 = new import12.Wrapper_Icon(this.parentInjector.get(import8.Config),new import9.ElementRef(this._el_0),this.renderer);
    this._el_1 = this.renderer.createElement(parentRenderNode,'span',(null as any));
    this.renderer.setElementAttribute(this._el_1,'class','button-inner');
    this.renderer.projectNodes(this._el_1,import2.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._el_2 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_2,'class','button-effect');
    this._expr_1 = import1.UNINITIALIZED;
    this.init(([] as any[]),[
      this._el_0,
      this._el_1,
      this._el_2
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import13.Icon) && (0 === requestNodeIndex))) { return this._Icon_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = 'close';
    this._Icon_0_3.check_name(currVal_0,throwOnChange,false);
    this._Icon_0_3.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_1:any = this._Icon_0_3.context._hidden;
    if (import2.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementClass(this._el_0,'hide',currVal_1);
      this._expr_1 = currVal_1;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._Icon_0_3.context.ngOnDestroy();
  }
}
export function viewFactory_FabButton0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.FabButton> {
  if ((renderType_FabButton === (null as any))) { (renderType_FabButton = viewUtils.createRenderComponentType('',1,import10.ViewEncapsulation.None,styles_FabButton,{})); }
  return new _View_FabButton0(viewUtils,parentInjector,declarationEl);
}
var renderType_FabContainer_Host:import4.RenderComponentType = (null as any);
class _View_FabContainer_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _FabContainer_0_4:Wrapper_FabContainer;
  _query_FabButton_0_0:import14.QueryList<any>;
  _query_FabList_0_1:import14.QueryList<any>;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_FabContainer_Host0,renderType_FabContainer_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ion-fab',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_FabContainer0(this.viewUtils,this.injector(0),this._appEl_0);
    this._FabContainer_0_4 = new Wrapper_FabContainer(new import9.ElementRef(this._el_0));
    this._query_FabButton_0_0 = new import14.QueryList<any>();
    this._query_FabList_0_1 = new import14.QueryList<any>();
    this._appEl_0.initComponent(this._FabContainer_0_4.context,([] as any[]),compView_0);
    this._query_FabButton_0_0.reset(([] as any[]));
    this._FabContainer_0_4.context._mainButton = this._query_FabButton_0_0.first;
    compView_0.create(this._FabContainer_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.FabContainer) && (0 === requestNodeIndex))) { return this._FabContainer_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._FabContainer_0_4.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) {
      if (this._query_FabList_0_1.dirty) {
        this._query_FabList_0_1.reset(([] as any[]));
        this._FabContainer_0_4.context._fabLists = this._query_FabList_0_1;
        this._query_FabList_0_1.notifyOnChanges();
      }
      if ((this.numberOfChecks === 0)) { this._FabContainer_0_4.context.ngAfterContentInit(); }
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._FabContainer_0_4.context.ngOnDestroy();
  }
}
function viewFactory_FabContainer_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_FabContainer_Host === (null as any))) { (renderType_FabContainer_Host = viewUtils.createRenderComponentType('',0,import10.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_FabContainer_Host0(viewUtils,parentInjector,declarationEl);
}
export const FabContainerNgFactory:import11.ComponentFactory<import0.FabContainer> = new import11.ComponentFactory<import0.FabContainer>('ion-fab',viewFactory_FabContainer_Host0,import0.FabContainer);
const styles_FabContainer:any[] = ([] as any[]);
var renderType_FabContainer:import4.RenderComponentType = (null as any);
class _View_FabContainer0 extends import3.AppView<import0.FabContainer> {
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_FabContainer0,renderType_FabContainer,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this.renderer.projectNodes(parentRenderNode,import2.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this.init(([] as any[]),([] as any[]),([] as any[]),([] as any[]));
    return (null as any);
  }
}
export function viewFactory_FabContainer0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.FabContainer> {
  if ((renderType_FabContainer === (null as any))) { (renderType_FabContainer = viewUtils.createRenderComponentType('',1,import10.ViewEncapsulation.None,styles_FabContainer,{})); }
  return new _View_FabContainer0(viewUtils,parentInjector,declarationEl);
}
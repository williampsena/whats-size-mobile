/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ionic-angular/components/virtual-scroll/virtual-scroll';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
export class Wrapper_VirtualScroll {
  context:import0.VirtualScroll;
  changed:boolean;
  /*private*/ _virtualScroll:any;
  /*private*/ _bufferRatio:any;
  /*private*/ _approxItemWidth:any;
  /*private*/ _approxItemHeight:any;
  /*private*/ _approxHeaderWidth:any;
  /*private*/ _approxHeaderHeight:any;
  /*private*/ _approxFooterWidth:any;
  /*private*/ _approxFooterHeight:any;
  /*private*/ _headerFn:any;
  /*private*/ _footerFn:any;
  /*private*/ _virtualTrackBy:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any,p5:any,p6:any,p7:any,p8:any) {
    this.changed = false;
    this._virtualScroll = import1.UNINITIALIZED;
    this._bufferRatio = import1.UNINITIALIZED;
    this._approxItemWidth = import1.UNINITIALIZED;
    this._approxItemHeight = import1.UNINITIALIZED;
    this._approxHeaderWidth = import1.UNINITIALIZED;
    this._approxHeaderHeight = import1.UNINITIALIZED;
    this._approxFooterWidth = import1.UNINITIALIZED;
    this._approxFooterHeight = import1.UNINITIALIZED;
    this._headerFn = import1.UNINITIALIZED;
    this._footerFn = import1.UNINITIALIZED;
    this._virtualTrackBy = import1.UNINITIALIZED;
    this.context = new import0.VirtualScroll(p0,p1,p2,p3,p4,p5,p6,p7,p8);
  }
  check_virtualScroll(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._virtualScroll,currValue))) {
      this.changed = true;
      this.context.virtualScroll = currValue;
      this._virtualScroll = currValue;
    }
  }
  check_bufferRatio(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._bufferRatio,currValue))) {
      this.changed = true;
      this.context.bufferRatio = currValue;
      this._bufferRatio = currValue;
    }
  }
  check_approxItemWidth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._approxItemWidth,currValue))) {
      this.changed = true;
      this.context.approxItemWidth = currValue;
      this._approxItemWidth = currValue;
    }
  }
  check_approxItemHeight(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._approxItemHeight,currValue))) {
      this.changed = true;
      this.context.approxItemHeight = currValue;
      this._approxItemHeight = currValue;
    }
  }
  check_approxHeaderWidth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._approxHeaderWidth,currValue))) {
      this.changed = true;
      this.context.approxHeaderWidth = currValue;
      this._approxHeaderWidth = currValue;
    }
  }
  check_approxHeaderHeight(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._approxHeaderHeight,currValue))) {
      this.changed = true;
      this.context.approxHeaderHeight = currValue;
      this._approxHeaderHeight = currValue;
    }
  }
  check_approxFooterWidth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._approxFooterWidth,currValue))) {
      this.changed = true;
      this.context.approxFooterWidth = currValue;
      this._approxFooterWidth = currValue;
    }
  }
  check_approxFooterHeight(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._approxFooterHeight,currValue))) {
      this.changed = true;
      this.context.approxFooterHeight = currValue;
      this._approxFooterHeight = currValue;
    }
  }
  check_headerFn(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._headerFn,currValue))) {
      this.changed = true;
      this.context.headerFn = currValue;
      this._headerFn = currValue;
    }
  }
  check_footerFn(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._footerFn,currValue))) {
      this.changed = true;
      this.context.footerFn = currValue;
      this._footerFn = currValue;
    }
  }
  check_virtualTrackBy(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._virtualTrackBy,currValue))) {
      this.changed = true;
      this.context.virtualTrackBy = currValue;
      this._virtualTrackBy = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { this.context.ngDoCheck(); }
    return changed;
  }
}
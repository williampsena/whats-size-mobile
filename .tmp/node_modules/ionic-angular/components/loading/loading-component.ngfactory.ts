/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ionic-angular/components/loading/loading-component';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/element';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from 'ionic-angular/navigation/view-controller';
import * as import9 from 'ionic-angular/config/config';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from 'ionic-angular/navigation/nav-params';
import * as import12 from '@angular/core/src/metadata/view';
import * as import13 from '@angular/core/src/linker/component_factory';
import * as import14 from '../backdrop/backdrop.ngfactory';
import * as import15 from '../../../@angular/common/src/directives/ng_if.ngfactory';
import * as import16 from 'ionic-angular/gestures/gesture-controller';
import * as import17 from '@angular/core/src/linker/template_ref';
import * as import18 from 'ionic-angular/components/backdrop/backdrop';
import * as import19 from '@angular/common/src/directives/ng_if';
import * as import20 from '../spinner/spinner.ngfactory';
import * as import21 from 'ionic-angular/components/spinner/spinner';
import * as import22 from '@angular/core/src/security';
export class Wrapper_LoadingCmp {
  context:import0.LoadingCmp;
  changed:boolean;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any) {
    this.changed = false;
    this.context = new import0.LoadingCmp(p0,p1,p2,p3,p4);
  }
  detectChangesInternal(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
}
var renderType_LoadingCmp_Host:import2.RenderComponentType = (null as any);
class _View_LoadingCmp_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import3.AppElement;
  _LoadingCmp_0_4:Wrapper_LoadingCmp;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import3.AppElement) {
    super(_View_LoadingCmp_Host0,renderType_LoadingCmp_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import3.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ion-loading',rootSelector,(null as any));
    this.renderer.setElementAttribute(this._el_0,'role','dialog');
    this._appEl_0 = new import3.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_LoadingCmp0(this.viewUtils,this.injector(0),this._appEl_0);
    this._LoadingCmp_0_4 = new Wrapper_LoadingCmp(this.parentInjector.get(import8.ViewController),this.parentInjector.get(import9.Config),new import10.ElementRef(this._el_0),this.parentInjector.get(import11.NavParams),this.renderer);
    this._appEl_0.initComponent(this._LoadingCmp_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._LoadingCmp_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.LoadingCmp) && (0 === requestNodeIndex))) { return this._LoadingCmp_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._LoadingCmp_0_4.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_LoadingCmp_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import3.AppElement):import1.AppView<any> {
  if ((renderType_LoadingCmp_Host === (null as any))) { (renderType_LoadingCmp_Host = viewUtils.createRenderComponentType('',0,import12.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_LoadingCmp_Host0(viewUtils,parentInjector,declarationEl);
}
export const LoadingCmpNgFactory:import13.ComponentFactory<import0.LoadingCmp> = new import13.ComponentFactory<import0.LoadingCmp>('ion-loading',viewFactory_LoadingCmp_Host0,import0.LoadingCmp);
const styles_LoadingCmp:any[] = ([] as any[]);
var renderType_LoadingCmp:import2.RenderComponentType = (null as any);
class _View_LoadingCmp0 extends import1.AppView<import0.LoadingCmp> {
  _el_0:any;
  _Backdrop_0_3:import14.Wrapper_Backdrop;
  _el_1:any;
  _anchor_2:any;
  /*private*/ _appEl_2:import3.AppElement;
  _TemplateRef_2_5:any;
  _NgIf_2_6:import15.Wrapper_NgIf;
  _anchor_3:any;
  /*private*/ _appEl_3:import3.AppElement;
  _TemplateRef_3_5:any;
  _NgIf_3_6:import15.Wrapper_NgIf;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import3.AppElement) {
    super(_View_LoadingCmp0,renderType_LoadingCmp,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import3.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'ion-backdrop',(null as any));
    this.renderer.setElementAttribute(this._el_0,'disable-activated','');
    this.renderer.setElementAttribute(this._el_0,'role','presentation');
    this.renderer.setElementAttribute(this._el_0,'tappable','');
    this._Backdrop_0_3 = new import14.Wrapper_Backdrop(this.parentInjector.get(import16.GestureController),new import10.ElementRef(this._el_0),this.renderer);
    this._el_1 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_1,'class','loading-wrapper');
    this._anchor_2 = this.renderer.createTemplateAnchor(this._el_1,(null as any));
    this._appEl_2 = new import3.AppElement(2,1,this,this._anchor_2);
    this._TemplateRef_2_5 = new import17.TemplateRef_(this._appEl_2,viewFactory_LoadingCmp1);
    this._NgIf_2_6 = new import15.Wrapper_NgIf(this._appEl_2.vcRef,this._TemplateRef_2_5);
    this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1,(null as any));
    this._appEl_3 = new import3.AppElement(3,1,this,this._anchor_3);
    this._TemplateRef_3_5 = new import17.TemplateRef_(this._appEl_3,viewFactory_LoadingCmp2);
    this._NgIf_3_6 = new import15.Wrapper_NgIf(this._appEl_3.vcRef,this._TemplateRef_3_5);
    this._expr_0 = import7.UNINITIALIZED;
    this.init(([] as any[]),[
      this._el_0,
      this._el_1,
      this._anchor_2,
      this._anchor_3
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.Backdrop) && (0 === requestNodeIndex))) { return this._Backdrop_0_3.context; }
    if (((token === import17.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import19.NgIf) && (2 === requestNodeIndex))) { return this._NgIf_2_6.context; }
    if (((token === import17.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import19.NgIf) && (3 === requestNodeIndex))) { return this._NgIf_3_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Backdrop_0_3.detectChangesInternal(this,this._el_0,throwOnChange);
    const currVal_1:any = this.context.showSpinner;
    this._NgIf_2_6.check_ngIf(currVal_1,throwOnChange,false);
    this._NgIf_2_6.detectChangesInternal(this,this._anchor_2,throwOnChange);
    const currVal_2:any = this.context.d.content;
    this._NgIf_3_6.check_ngIf(currVal_2,throwOnChange,false);
    this._NgIf_3_6.detectChangesInternal(this,this._anchor_3,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:boolean = !this.context.d.showBackdrop;
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'hide-backdrop',currVal_0);
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._Backdrop_0_3.context.ngOnDestroy();
  }
}
export function viewFactory_LoadingCmp0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import3.AppElement):import1.AppView<import0.LoadingCmp> {
  if ((renderType_LoadingCmp === (null as any))) { (renderType_LoadingCmp = viewUtils.createRenderComponentType('',0,import12.ViewEncapsulation.None,styles_LoadingCmp,{})); }
  return new _View_LoadingCmp0(viewUtils,parentInjector,declarationEl);
}
class _View_LoadingCmp1 extends import1.AppView<any> {
  _el_0:any;
  _el_1:any;
  /*private*/ _appEl_1:import3.AppElement;
  _Spinner_1_4:import20.Wrapper_Spinner;
  /*private*/ _expr_1:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import3.AppElement) {
    super(_View_LoadingCmp1,renderType_LoadingCmp,import6.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import3.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','loading-spinner');
    this._el_1 = this.renderer.createElement(this._el_0,'ion-spinner',(null as any));
    this._appEl_1 = new import3.AppElement(1,0,this,this._el_1);
    var compView_1:any = import20.viewFactory_Spinner0(this.viewUtils,this.injector(1),this._appEl_1);
    this._Spinner_1_4 = new import20.Wrapper_Spinner(this.parent.parentInjector.get(import9.Config),new import10.ElementRef(this._el_1),this.renderer);
    this._appEl_1.initComponent(this._Spinner_1_4.context,([] as any[]),compView_1);
    compView_1.create(this._Spinner_1_4.context,([] as any[]),(null as any));
    this._expr_1 = import7.UNINITIALIZED;
    this.init(([] as any[]).concat([this._el_0]),[
      this._el_0,
      this._el_1
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import21.Spinner) && (1 === requestNodeIndex))) { return this._Spinner_1_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = this.parent.context.d.spinner;
    this._Spinner_1_4.check_name(currVal_0,throwOnChange,false);
    if (this._Spinner_1_4.detectChangesInternal(this,this._el_1,throwOnChange)) { this._appEl_1.componentView.markAsCheckOnce(); }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_1:any = this._Spinner_1_4.context.paused;
    if (import4.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementClass(this._el_1,'spinner-paused',currVal_1);
      this._expr_1 = currVal_1;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_LoadingCmp1(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import3.AppElement):import1.AppView<any> {
  return new _View_LoadingCmp1(viewUtils,parentInjector,declarationEl);
}
class _View_LoadingCmp2 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import3.AppElement) {
    super(_View_LoadingCmp2,renderType_LoadingCmp,import6.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import3.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','loading-content');
    this._expr_0 = import7.UNINITIALIZED;
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this.parent.context.d.content;
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementProperty(this._el_0,'innerHTML',this.viewUtils.sanitizer.sanitize(import22.SecurityContext.HTML,currVal_0));
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_LoadingCmp2(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import3.AppElement):import1.AppView<any> {
  return new _View_LoadingCmp2(viewUtils,parentInjector,declarationEl);
}
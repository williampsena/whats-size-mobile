/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ionic-angular/components/button/button';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ionic-angular/config/config';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/component_factory';
export class Wrapper_Button {
  context:import0.Button;
  changed:boolean;
  /*private*/ _large:any;
  /*private*/ _small:any;
  /*private*/ _default:any;
  /*private*/ _outline:any;
  /*private*/ _clear:any;
  /*private*/ _solid:any;
  /*private*/ _round:any;
  /*private*/ _block:any;
  /*private*/ _full:any;
  /*private*/ _mode:any;
  /*private*/ _color:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any) {
    this.changed = false;
    this._large = import1.UNINITIALIZED;
    this._small = import1.UNINITIALIZED;
    this._default = import1.UNINITIALIZED;
    this._outline = import1.UNINITIALIZED;
    this._clear = import1.UNINITIALIZED;
    this._solid = import1.UNINITIALIZED;
    this._round = import1.UNINITIALIZED;
    this._block = import1.UNINITIALIZED;
    this._full = import1.UNINITIALIZED;
    this._mode = import1.UNINITIALIZED;
    this._color = import1.UNINITIALIZED;
    this.context = new import0.Button(p0,p1,p2,p3,p4);
  }
  check_large(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._large,currValue))) {
      this.changed = true;
      this.context.large = currValue;
      this._large = currValue;
    }
  }
  check_small(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._small,currValue))) {
      this.changed = true;
      this.context.small = currValue;
      this._small = currValue;
    }
  }
  check_default(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._default,currValue))) {
      this.changed = true;
      this.context.default = currValue;
      this._default = currValue;
    }
  }
  check_outline(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._outline,currValue))) {
      this.changed = true;
      this.context.outline = currValue;
      this._outline = currValue;
    }
  }
  check_clear(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._clear,currValue))) {
      this.changed = true;
      this.context.clear = currValue;
      this._clear = currValue;
    }
  }
  check_solid(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._solid,currValue))) {
      this.changed = true;
      this.context.solid = currValue;
      this._solid = currValue;
    }
  }
  check_round(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._round,currValue))) {
      this.changed = true;
      this.context.round = currValue;
      this._round = currValue;
    }
  }
  check_block(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._block,currValue))) {
      this.changed = true;
      this.context.block = currValue;
      this._block = currValue;
    }
  }
  check_full(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._full,currValue))) {
      this.changed = true;
      this.context.full = currValue;
      this._full = currValue;
    }
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._mode,currValue))) {
      this.changed = true;
      this.context.mode = currValue;
      this._mode = currValue;
    }
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._color,currValue))) {
      this.changed = true;
      this.context.color = currValue;
      this._color = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
var renderType_Button_Host:import4.RenderComponentType = (null as any);
class _View_Button_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _Button_0_4:Wrapper_Button;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_Button_Host0,renderType_Button_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('div',rootSelector,(null as any));
    this.renderer.setElementAttribute(this._el_0,'ion-button','');
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_Button0(this.viewUtils,this.injector(0),this._appEl_0);
    this._Button_0_4 = new Wrapper_Button((null as any),'',this.parentInjector.get(import8.Config),new import9.ElementRef(this._el_0),this.renderer);
    this._appEl_0.initComponent(this._Button_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._Button_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.Button) && (0 === requestNodeIndex))) { return this._Button_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._Button_0_4.detectChangesInternal(this,this._el_0,throwOnChange)) { this._appEl_0.componentView.markAsCheckOnce(); }
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._Button_0_4.context.ngAfterContentInit(); } }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_Button_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_Button_Host === (null as any))) { (renderType_Button_Host = viewUtils.createRenderComponentType('',0,import10.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_Button_Host0(viewUtils,parentInjector,declarationEl);
}
export const ButtonNgFactory:import11.ComponentFactory<import0.Button> = new import11.ComponentFactory<import0.Button>('[ion-button]',viewFactory_Button_Host0,import0.Button);
const styles_Button:any[] = ([] as any[]);
var renderType_Button:import4.RenderComponentType = (null as any);
class _View_Button0 extends import3.AppView<import0.Button> {
  _el_0:any;
  _el_1:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_Button0,renderType_Button,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'span',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','button-inner');
    this.renderer.projectNodes(this._el_0,import2.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._el_1 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_1,'class','button-effect');
    this.init(([] as any[]),[
      this._el_0,
      this._el_1
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
}
export function viewFactory_Button0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.Button> {
  if ((renderType_Button === (null as any))) { (renderType_Button = viewUtils.createRenderComponentType('',1,import10.ViewEncapsulation.None,styles_Button,{})); }
  return new _View_Button0(viewUtils,parentInjector,declarationEl);
}
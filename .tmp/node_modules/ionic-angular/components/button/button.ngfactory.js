/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from 'ionic-angular/components/button/button';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/element';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ionic-angular/config/config';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/component_factory';
export var Wrapper_Button = (function () {
    function Wrapper_Button(p0, p1, p2, p3, p4) {
        this.changed = false;
        this._large = import1.UNINITIALIZED;
        this._small = import1.UNINITIALIZED;
        this._default = import1.UNINITIALIZED;
        this._outline = import1.UNINITIALIZED;
        this._clear = import1.UNINITIALIZED;
        this._solid = import1.UNINITIALIZED;
        this._round = import1.UNINITIALIZED;
        this._block = import1.UNINITIALIZED;
        this._full = import1.UNINITIALIZED;
        this._mode = import1.UNINITIALIZED;
        this._color = import1.UNINITIALIZED;
        this.context = new import0.Button(p0, p1, p2, p3, p4);
    }
    Wrapper_Button.prototype.check_large = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._large, currValue))) {
            this.changed = true;
            this.context.large = currValue;
            this._large = currValue;
        }
    };
    Wrapper_Button.prototype.check_small = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._small, currValue))) {
            this.changed = true;
            this.context.small = currValue;
            this._small = currValue;
        }
    };
    Wrapper_Button.prototype.check_default = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._default, currValue))) {
            this.changed = true;
            this.context.default = currValue;
            this._default = currValue;
        }
    };
    Wrapper_Button.prototype.check_outline = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._outline, currValue))) {
            this.changed = true;
            this.context.outline = currValue;
            this._outline = currValue;
        }
    };
    Wrapper_Button.prototype.check_clear = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._clear, currValue))) {
            this.changed = true;
            this.context.clear = currValue;
            this._clear = currValue;
        }
    };
    Wrapper_Button.prototype.check_solid = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._solid, currValue))) {
            this.changed = true;
            this.context.solid = currValue;
            this._solid = currValue;
        }
    };
    Wrapper_Button.prototype.check_round = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._round, currValue))) {
            this.changed = true;
            this.context.round = currValue;
            this._round = currValue;
        }
    };
    Wrapper_Button.prototype.check_block = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._block, currValue))) {
            this.changed = true;
            this.context.block = currValue;
            this._block = currValue;
        }
    };
    Wrapper_Button.prototype.check_full = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._full, currValue))) {
            this.changed = true;
            this.context.full = currValue;
            this._full = currValue;
        }
    };
    Wrapper_Button.prototype.check_mode = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._mode, currValue))) {
            this.changed = true;
            this.context.mode = currValue;
            this._mode = currValue;
        }
    };
    Wrapper_Button.prototype.check_color = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._color, currValue))) {
            this.changed = true;
            this.context.color = currValue;
            this._color = currValue;
        }
    };
    Wrapper_Button.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        return changed;
    };
    return Wrapper_Button;
}());
var renderType_Button_Host = null;
var _View_Button_Host0 = (function (_super) {
    __extends(_View_Button_Host0, _super);
    function _View_Button_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_Button_Host0, renderType_Button_Host, import7.ViewType.HOST, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_Button_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('div', rootSelector, null);
        this.renderer.setElementAttribute(this._el_0, 'ion-button', '');
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_Button0(this.viewUtils, this.injector(0), this._appEl_0);
        this._Button_0_4 = new Wrapper_Button(null, '', this.parentInjector.get(import8.Config), new import9.ElementRef(this._el_0), this.renderer);
        this._appEl_0.initComponent(this._Button_0_4.context, [], compView_0);
        compView_0.create(this._Button_0_4.context, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_Button_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.Button) && (0 === requestNodeIndex))) {
            return this._Button_0_4.context;
        }
        return notFoundResult;
    };
    _View_Button_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        if (this._Button_0_4.detectChangesInternal(this, this._el_0, throwOnChange)) {
            this._appEl_0.componentView.markAsCheckOnce();
        }
        this.detectContentChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._Button_0_4.context.ngAfterContentInit();
            }
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_Button_Host0;
}(import3.AppView));
function viewFactory_Button_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_Button_Host === null)) {
        (renderType_Button_Host = viewUtils.createRenderComponentType('', 0, import10.ViewEncapsulation.None, [], {}));
    }
    return new _View_Button_Host0(viewUtils, parentInjector, declarationEl);
}
export var ButtonNgFactory = new import11.ComponentFactory('[ion-button]', viewFactory_Button_Host0, import0.Button);
var styles_Button = [];
var renderType_Button = null;
var _View_Button0 = (function (_super) {
    __extends(_View_Button0, _super);
    function _View_Button0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_Button0, renderType_Button, import7.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckOnce);
    }
    _View_Button0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'span', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'button-inner');
        this.renderer.projectNodes(this._el_0, import2.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._el_1 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_1, 'class', 'button-effect');
        this.init([], [
            this._el_0,
            this._el_1
        ], [], []);
        return null;
    };
    return _View_Button0;
}(import3.AppView));
export function viewFactory_Button0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_Button === null)) {
        (renderType_Button = viewUtils.createRenderComponentType('', 1, import10.ViewEncapsulation.None, styles_Button, {}));
    }
    return new _View_Button0(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=button.ngfactory.js.map
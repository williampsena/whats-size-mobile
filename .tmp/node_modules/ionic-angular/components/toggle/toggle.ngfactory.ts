/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ionic-angular/components/toggle/toggle';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ionic-angular/util/form';
import * as import9 from 'ionic-angular/config/config';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from 'ionic-angular/util/haptic';
import * as import12 from 'ionic-angular/components/item/item';
import * as import13 from '@angular/forms/src/directives/control_value_accessor';
import * as import14 from '@angular/core/src/metadata/view';
import * as import15 from '@angular/core/src/linker/component_factory';
import * as import16 from '../button/button.ngfactory';
import * as import17 from 'ionic-angular/components/button/button';
export class Wrapper_Toggle {
  context:import0.Toggle;
  changed:boolean;
  /*private*/ _color:any;
  /*private*/ _mode:any;
  /*private*/ _checked:any;
  /*private*/ _disabled:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any,p5:any) {
    this.changed = false;
    this._color = import1.UNINITIALIZED;
    this._mode = import1.UNINITIALIZED;
    this._checked = import1.UNINITIALIZED;
    this._disabled = import1.UNINITIALIZED;
    this.context = new import0.Toggle(p0,p1,p2,p3,p4,p5);
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._color,currValue))) {
      this.changed = true;
      this.context.color = currValue;
      this._color = currValue;
    }
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._mode,currValue))) {
      this.changed = true;
      this.context.mode = currValue;
      this._mode = currValue;
    }
  }
  check_checked(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._checked,currValue))) {
      this.changed = true;
      this.context.checked = currValue;
      this._checked = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._disabled,currValue))) {
      this.changed = true;
      this.context.disabled = currValue;
      this._disabled = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
var renderType_Toggle_Host:import4.RenderComponentType = (null as any);
class _View_Toggle_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _Toggle_0_4:Wrapper_Toggle;
  __NG_VALUE_ACCESSOR_0_5:any[];
  /*private*/ _expr_0:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_Toggle_Host0,renderType_Toggle_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  get _NG_VALUE_ACCESSOR_0_5():any[] {
    if ((this.__NG_VALUE_ACCESSOR_0_5 == (null as any))) { (this.__NG_VALUE_ACCESSOR_0_5 = [this._Toggle_0_4.context]); }
    return this.__NG_VALUE_ACCESSOR_0_5;
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ion-toggle',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_Toggle0(this.viewUtils,this.injector(0),this._appEl_0);
    this._Toggle_0_4 = new Wrapper_Toggle(this.parentInjector.get(import8.Form),this.parentInjector.get(import9.Config),new import10.ElementRef(this._el_0),this.renderer,this.parentInjector.get(import11.Haptic),this.parentInjector.get(import12.Item,(null as any)));
    this._appEl_0.initComponent(this._Toggle_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._Toggle_0_4.context,this.projectableNodes,(null as any));
    this._expr_0 = import1.UNINITIALIZED;
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.Toggle) && (0 === requestNodeIndex))) { return this._Toggle_0_4.context; }
    if (((token === import13.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_5; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Toggle_0_4.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._Toggle_0_4.context.ngAfterContentInit(); } }
    const currVal_0:any = this._Toggle_0_4.context._disabled;
    if (import2.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'toggle-disabled',currVal_0);
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._Toggle_0_4.context.ngOnDestroy();
  }
}
function viewFactory_Toggle_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_Toggle_Host === (null as any))) { (renderType_Toggle_Host = viewUtils.createRenderComponentType('',0,import14.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_Toggle_Host0(viewUtils,parentInjector,declarationEl);
}
export const ToggleNgFactory:import15.ComponentFactory<import0.Toggle> = new import15.ComponentFactory<import0.Toggle>('ion-toggle',viewFactory_Toggle_Host0,import0.Toggle);
const styles_Toggle:any[] = ([] as any[]);
var renderType_Toggle:import4.RenderComponentType = (null as any);
class _View_Toggle0 extends import3.AppView<import0.Toggle> {
  _el_0:any;
  _el_1:any;
  _el_2:any;
  /*private*/ _appEl_2:import5.AppElement;
  _Button_2_4:import16.Wrapper_Button;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_Toggle0,renderType_Toggle,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','toggle-icon');
    this._el_1 = this.renderer.createElement(this._el_0,'div',(null as any));
    this.renderer.setElementAttribute(this._el_1,'class','toggle-inner');
    this._el_2 = this.renderer.createElement(parentRenderNode,'button',(null as any));
    this.renderer.setElementAttribute(this._el_2,'class','item-cover');
    this.renderer.setElementAttribute(this._el_2,'ion-button','item-cover');
    this.renderer.setElementAttribute(this._el_2,'role','checkbox');
    this.renderer.setElementAttribute(this._el_2,'type','button');
    this._appEl_2 = new import5.AppElement(2,(null as any),this,this._el_2);
    var compView_2:any = import16.viewFactory_Button0(this.viewUtils,this.injector(2),this._appEl_2);
    this._Button_2_4 = new import16.Wrapper_Button((null as any),'item-cover',this.parentInjector.get(import9.Config),new import10.ElementRef(this._el_2),this.renderer);
    this._appEl_2.initComponent(this._Button_2_4.context,([] as any[]),compView_2);
    compView_2.create(this._Button_2_4.context,[([] as any[])],(null as any));
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this.init(([] as any[]),[
      this._el_0,
      this._el_1,
      this._el_2
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import17.Button) && (2 === requestNodeIndex))) { return this._Button_2_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._Button_2_4.detectChangesInternal(this,this._el_2,throwOnChange)) { this._appEl_2.componentView.markAsCheckOnce(); }
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._Button_2_4.context.ngAfterContentInit(); } }
    const currVal_0:any = this.context._checked;
    if (import2.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'toggle-checked',currVal_0);
      this._expr_0 = currVal_0;
    }
    const currVal_1:any = this.context._activated;
    if (import2.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementClass(this._el_0,'toggle-activated',currVal_1);
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = this.context.id;
    if (import2.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setElementProperty(this._el_2,'id',currVal_2);
      this._expr_2 = currVal_2;
    }
    const currVal_3:any = this.context._checked;
    if (import2.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      this.renderer.setElementAttribute(this._el_2,'aria-checked',((currVal_3 == (null as any))? (null as any): currVal_3.toString()));
      this._expr_3 = currVal_3;
    }
    const currVal_4:any = this.context._labelId;
    if (import2.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setElementAttribute(this._el_2,'aria-labelledby',((currVal_4 == (null as any))? (null as any): currVal_4.toString()));
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context._disabled;
    if (import2.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setElementAttribute(this._el_2,'aria-disabled',((currVal_5 == (null as any))? (null as any): currVal_5.toString()));
      this._expr_5 = currVal_5;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_Toggle0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.Toggle> {
  if ((renderType_Toggle === (null as any))) { (renderType_Toggle = viewUtils.createRenderComponentType('',0,import14.ViewEncapsulation.None,styles_Toggle,{})); }
  return new _View_Toggle0(viewUtils,parentInjector,declarationEl);
}